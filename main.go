package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"time"

	"github.com/chrisDeFouRire/CVE-2016-2107/LuckyMinus20"
	nats "github.com/nats-io/go-nats"
)

type cveRequest struct {
	Hostname   string `json:"hostname"`
	Host       string `json:"host"`
	Port       int32  `json:"port"`
	Timeoutsec int32  `json:"timeoutsec"`
}

type cveResponse struct {
	Hostname   string `json:"hostname"`
	Host       string `json:"host"`
	Port       int32  `json:"port"`
	Vulnerable bool   `json:"vulnerable"`
	Error      string `json:"error,omitifempty"`
}

func main() {

	natsURL := os.Getenv("NATS_URL")
	if natsURL == "" {
		natsURL = "nats://127.0.0.1:4222"
	}

	natsChannel := os.Getenv("NATS_CHANNEL")
	if natsChannel == "" {
		natsChannel = "vuln.CVE-2016-2107.*"
	}

	var nc *nats.Conn
	nc, _ = nats.Connect(
		natsURL,
		nats.MaxReconnects(-1),
		nats.ReconnectWait(1*time.Second),
		nats.DisconnectHandler(func(nc *nats.Conn) {
			fmt.Printf("Got disconnected from nats!\n")
		}),
		nats.ReconnectHandler(func(_ *nats.Conn) {
			fmt.Printf("Got reconnected to %v!\n", nc.ConnectedUrl())
		}),
		nats.ClosedHandler(func(nc *nats.Conn) {
			fmt.Printf("Connection closed. Reason: %q\n", nc.LastError())
		}))

	fmt.Println("Connected to Nats")

	nc.QueueSubscribe(natsChannel, "group", func(msg *nats.Msg) {
		req := cveRequest{}
		jierr := json.Unmarshal(msg.Data, &req)
		if jierr != nil {
			fmt.Println("JSON request unmarshal Error: ", jierr.Error())
		}
		res := cveResponse{
			Hostname: req.Hostname,
			Host:     req.Host,
			Port:     req.Port,
		}

		timeout := time.Duration(req.Timeoutsec) * time.Second
		if timeout == 0 {
			timeout = time.Duration(15) * time.Second
		}
		vulnerable, err := LuckyMinus20.Test(req.Hostname, req.Host, req.Port, timeout)

		if err != nil {
			res.Error = err.Error()
		}
		res.Vulnerable = vulnerable

		fmt.Println(res)

		bytes, joerr := json.Marshal(res)
		if joerr != nil {
			fmt.Println("JSON response marshal Error: ", jierr.Error())
		}
		nc.Publish(msg.Reply, bytes)
	})
	runtime.Goexit()
}
